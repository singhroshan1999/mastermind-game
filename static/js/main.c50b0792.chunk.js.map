{"version":3,"sources":["element.js","container/selector.js","container/selected.js","container/ListSelected.js","container/result.js","App.js","serviceWorker.js","index.js"],"names":["Element","SelectorCircle","props","color","backgroundColor","colors","react_default","a","createElement","onClick","select","colorCode","className","style","SelectedCircle","MarkerCircle","SerialNo","serno","WinnerBox","ResetButton","resetHandler","selector","src_element","selected","selectedColor","0","1","2","3","4","5","markerColor","circles","Fragment","marker","highlight","ListSelected","i","round","push","container_selected","key","slice","reverse","Reault","pat","pattern","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","result","arr","length","Math","floor","random","includes","selectorHandle","state","r","setState","submitHandler","matchResult","states","console","log","getResultHandler","giveUp","clearHandler","pop","undefined","winner","display","lvalue","rvalue","ans","operator","count","decimal","lexp","rexp","int","updateDisplay","str","keypadHandler","btn","valueReset","sol","lv","pow","rv","parseInt","p","s","m","j","toConsumableArray","concat","sort","toString","disp","container_selector","container_ListSelected","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c50b0792.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Element = {\r\n    SelectorCircle: (props) => {\r\n        const color = {backgroundColor:props.colors};\r\n        return <div onClick={()=> props.select(props.colorCode)} className=\"selectorCircle\" style={color}>&nbsp;</div>\r\n    },\r\n    SelectedCircle: (props) => {\r\n        const color = {backgroundColor:props.colors};\r\n        return <div className=\"selectedCircle\" style={color}>&nbsp;</div>\r\n    },\r\n    MarkerCircle:(props) => {\r\n        const color = {backgroundColor:props.colors};\r\n        return <span className=\"markerCircle\" style={color}>&nbsp;</span>\r\n\r\n    },\r\n    SerialNo: (props) => {\r\n        return <div className=\"serialNo\">{props.serno}</div>\r\n    },\r\n    WinnerBox: (props) => {\r\n        return <div className=\"winner\"><h1>heil Winner!</h1></div>\r\n    },\r\n    ResetButton: (props) => {\r\n        return <div className=\"reset_button\"><button onClick= {props.resetHandler}>RESET</button></div>\r\n    }\r\n}\r\n\r\nexport default Element;","import React from 'react';\r\nimport Element from '../element';\r\n\r\nconst selector = (props) => {//use loop here\r\n    const colors = {\r\n        0:\"#FFFF00\",//yello\r\n        1:\"#CC9933\",//brown\r\n        2:\"#FF0000\",//red\r\n        3:\"#6633FF\",//blue\r\n        4:\"#993399\",//indigo\r\n        5:\"#009900\"//green\r\n    }\r\n    \r\n    return <div className = \"selector\">\r\n        <Element.SelectorCircle select = {props.select} colorCode = {0} colors = {colors[0]} />\r\n        <Element.SelectorCircle select = {props.select} colorCode = {1} colors = {colors[1]}/>\r\n        <Element.SelectorCircle select = {props.select} colorCode = {2} colors = {colors[2]}/>\r\n        <Element.SelectorCircle select = {props.select} colorCode = {3} colors = {colors[3]}/>\r\n        <Element.SelectorCircle select = {props.select} colorCode = {4} colors = {colors[4]}/>\r\n        <Element.SelectorCircle select = {props.select} colorCode = {5} colors = {colors[5]}/>\r\n    </div>\r\n}\r\n\r\nexport default selector;","import React from 'react';\r\nimport Element from '../element';\r\n\r\nconst selected = (props) => {//use loop here\r\n    const selected = props.selectedColor;\r\n    const colors = {\r\n        0:\"#FFFF00\",//yello\r\n        1:\"#CC9933\",//brown\r\n        2:\"#FF0000\",//red\r\n        3:\"#6633FF\",//blue\r\n        4:\"#993399\",//indigo\r\n        5:\"#009900\"//green\r\n    };\r\n\r\n    const markerColor = {\r\n        2 : \"#000\",//black--> positions are correct\r\n        0 : \"#fff\",//white--> neither color is correct\r\n        1 : \"#999\"//grey--> color correct\r\n    };\r\n\r\n    const circles = \r\n    <React.Fragment>\r\n    <Element.SelectedCircle colors = {colors[selected[0]]} />\r\n    <Element.SelectedCircle colors = {colors[selected[1]]} />\r\n    <Element.SelectedCircle colors = {colors[selected[2]]} />\r\n    <Element.SelectedCircle colors = {colors[selected[3]]} />\r\n    </React.Fragment>;\r\n\r\n    const marker = \r\n    <div className=\"markerDiv\">\r\n    <Element.MarkerCircle colors = {markerColor[props.markerColor[3]]} />\r\n    <Element.MarkerCircle colors = {markerColor[props.markerColor[2]]} />\r\n    <Element.MarkerCircle colors = {markerColor[props.markerColor[1]]} />\r\n    <Element.MarkerCircle colors = {markerColor[props.markerColor[0]]} />\r\n    </div>;\r\n\r\n    return <div className={props.highlight} >\r\n        <Element.SerialNo serno = {props.serno} />\r\n        <div className=\"selected\">{circles}</div>\r\n        <div className=\"marker\">{marker}</div>\r\n        {/* <div className=\"col-4\"></div> */}\r\n    </div>\r\n}\r\n\r\nexport default selected;","import React from 'react';\r\nimport Selected from './selected';\r\n\r\nconst ListSelected = (props) =>{\r\n    const selected = [];\r\n    for(let i  = 0;i<props.round;i++){\r\n        selected.push(<Selected key = {i} serno = {i+1} markerColor = {props.markerColor.slice(4*i,4*i+4)} selectedColor = {props.selectedColor.slice(4*i,4+4*i)} />)\r\n    }\r\n    return (\r\n        <div className = \"listSelected\">\r\n            {selected.reverse()}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ListSelected;\r\n","import React from 'react';\r\nimport Element from '../element';\r\n\r\n\r\nconst Reault = (props) => {\r\n    const colors = {\r\n        0:\"#FFFF00\",\r\n        1:\"#CC9933\",\r\n        2:\"#FF0000\",\r\n        3:\"#6633FF\",\r\n        4:\"#993399\",\r\n        5:\"#009900\"\r\n    };\r\n    const pat = props.pattern;\r\n    const circles = \r\n    <React.Fragment>\r\n    <Element.SelectedCircle colors = {colors[pat[0]]} />\r\n    <Element.SelectedCircle colors = {colors[pat[1]]} />\r\n    <Element.SelectedCircle colors = {colors[pat[2]]} />\r\n    <Element.SelectedCircle colors = {colors[pat[3]]} />\r\n    </React.Fragment>;\r\n    return (\r\n        <div className=\"result\">\r\n                {circles}\r\n               <br/><br/> you can always retry\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Reault;","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport Selector from './container/selector';\r\nimport ListSelected from './container/ListSelected';\r\nimport Result from './container/result';\r\nimport Element from './element';\r\n\r\n\r\nclass App extends Component {\r\n  result = () => {\r\n    let rint = () => Math.floor((Math.random() * 5) + 1);\r\n    let i = 0;\r\n    const arr = [];\r\n    while ( arr.length < 4) {\r\n      i = rint();\r\n      if(!arr.includes(i)) arr.push(i);\r\n    }\r\n    return arr;\r\n  }\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n      pattern : this.result(),\r\n      selectedColor: [],\r\n      round:1,\r\n      markerColor: [],\r\n\r\n    }\r\n  }\r\n\r\n  matchResult(){// i am assuming matchResult is called when selectedColor is perfectly filled\r\n    if(this.state.winner || this.state.giveUp) return true;\r\n    let p = this.state.pattern;\r\n    let r = this.state.round;\r\n    let s = this.state.selectedColor.slice(4*(r-1));\r\n    let m = [];\r\n    for(let i = 0;i<4;i++){\r\n      for(let j = 0;j<4;j++){\r\n          if(p[i] === s[j] && i === j){ m.push(2);continue;}\r\n          if(p[i] === s[j]){ m.push(1);continue;}\r\n      }\r\n      if(m.length < i+1) m.push(0);\r\n    }\r\n    this.setState((states,props)=>{\r\n      return {\r\n        markerColor:[...states.markerColor,...m.sort()]\r\n      }\r\n    });\r\n    if(p.toString() === s.toString()){\r\n      console.log(\"winner\");\r\n      this.setState({winner:true});\r\n      return true;\r\n    }\r\n  }\r\n  selectorHandle=(color) => {\r\n   const arr = this.state.selectedColor;\r\n   const r = this.state.round;\r\n    if(arr.length < 4*r && !arr.slice(4*(r-1)).includes(color)){\r\n\r\n       arr.push(color);\r\n       this.setState({selectedColor:arr});\r\n      }\r\n  }\r\n\r\n  submitHandler = () => {\r\n    if(this.state.selectedColor.length !== this.state.round*4){console.log(\"not fully filled\");return;}\r\n    const result = this.matchResult();\r\n    if(result) return;\r\n    this.setState((states,props)=> {\r\n      return {\r\n        round:states.round + 1\r\n      }\r\n    }) \r\n  }\r\n\r\n  getResultHandler = () => {\r\n    this.setState({giveUp:true})\r\n  }\r\n\r\n  clearHandler = () =>{\r\n    if(this.state.selectedColor.length > (this.state.round-1)*4) this.setState((states,props)=>{\r\n      states.selectedColor.pop();\r\n      // alert(x);\r\n      return {selectedColor:states.selectedColor}\r\n    })\r\n  }\r\n\r\n  resetHandler = () => {\r\n    this.setState({\r\n      pattern : this.result(),\r\n      selectedColor: [],\r\n      round:1,\r\n      markerColor: [],\r\n      giveUp:undefined,\r\n      winner:undefined\r\n    });\r\n  }\r\n\r\n  state = {\r\n    display : 0,\r\n    lvalue:0,\r\n    rvalue:undefined,\r\n    ans:undefined,\r\n    operator:undefined,\r\n    count:0,\r\n    decimal:10,\r\n    lexp:0,\r\n    rexp:0,\r\n    int:true\r\n  }\r\n\r\nvalueReset(){\r\n  this.setState({int:true,rvalue:0})\r\n}\r\n\r\nupdateDisplay = (str) => {\r\n  this.setState({display:str});\r\n}\r\nkeypadHandler = (btn) => {\r\n\r\n  switch(btn){\r\n    case '+':\r\n    this.setState({operator:0});\r\n    this.valueReset();\r\n    break;\r\n    case '-':\r\n    this.setState({operator:1});\r\n    this.valueReset();\r\n\r\n    break;\r\n    case '*':\r\n    this.setState({operator:2});\r\n    this.valueReset();\r\n\r\n    break;\r\n    case '/':\r\n    this.setState({operator:3});\r\n    this.valueReset();\r\n\r\n    break;\r\n    case '=':\r\n    const lv = this.state.lvalue*Math.pow(10,-this.state.lexp);\r\n    const rv = this.state.rvalue*Math.pow(10,-this.state.rexp);\r\n    const ans = this.state.ans;\r\n    var sol;// = this.state.ans;\r\n    switch(this.state.operator){\r\n      case 0: sol = lv+rv \r\n      break;\r\n      case 1: sol = lv-rv \r\n      break;\r\n      case 2: sol = lv*rv \r\n      break;\r\n      case 3: sol = lv/rv \r\n      break;\r\n\r\n    }\r\n    this.setState({ans:sol,operator:undefined});\r\n  \r\n    break;\r\n    case 'AC':\r\n    this.setState({\r\n      display : 0,\r\n      lvalue:0,\r\n      rvalue:0,\r\n      ans:undefined,\r\n      operator:undefined,\r\n      count:0,\r\n      decimal:10,\r\n      lexp:0,\r\n      rexp:0,\r\n      int:true\r\n    })\r\n    break;\r\n    case '+/-':\r\n    // this.setState({operator:5});\r\n    if(this.state.ans !== undefined){\r\n      this.setState({ans:-this.state.ans})\r\n    }else if (this.state.rvalue !== undefined) {\r\n      this.setState({rvalue:-this.state.rvalue})\r\n    } else {\r\n      this.setState({lvalue:-this.state.lvalue})\r\n    }\r\n    // this.valueReset();\r\n    break;\r\n    case '%':\r\n    // this.setState({operator:4});\r\n    // this.valueReset();\r\n    if(this.state.ans !== undefined){\r\n      this.setState({ans:this.state.ans/100.0})\r\n    }else if (this.state.rvalue !== undefined) {\r\n      this.setState({rvalue:this.state.rvalue})\r\n       this.keypadHandler('=')\r\n      //  this.keypadHandler('%')\r\n    } else {\r\n      this.setState({lvalue:this.state.lvalue/100.0})\r\n    }\r\n\r\n    break;\r\n    case '.':\r\n    if(this.state.int === true)\r\n        this.setState({int:false});\r\n    break;\r\n    default:\r\n    if(btn === '0' || '1' || '2' || '3' || '4' || '5' || '6' || '7' || '8' || '9'){\r\n      //  if(this.state.decimal === 10){\r\n      if(this.state.operator === undefined){\r\n        this.setState({lvalue:this.state.lvalue*this.state.decimal+parseInt(btn)});\r\n        if(this.state.int !== true) this.setState({lexp:this.state.lexp+1})\r\n      } else {\r\n        this.setState({rvalue:this.state.rvalue*this.state.decimal+parseInt(btn)});\r\n        if(this.state.int !== true) this.setState({rexp:this.state.rexp+1})\r\n      }\r\n   }\r\n  \r\n    break;\r\n\r\n\r\n\r\n  }\r\n  // alert('hell')\r\nif(this.state.operator !== undefined) {\r\n  this.updateDisplay(this.state.rvalue*Math.pow(10,-this.state.rexp))\r\n}else if (this.state.ans === undefined) {\r\n  this.updateDisplay(this.state.lvalue*Math.pow(10,-this.state.lexp))\r\n} else {\r\n  this.updateDisplay(this.state.ans)\r\n}\r\nthis.updateDisplay(this.state.lvalue*Math.pow(0.1,this.state.lexp));\r\nthis.updateDisplay(this.state.rvalue*Math.pow(0.1,this.state.rexp));\r\n\r\n}\r\n\r\n  render() {\r\n    let disp = null;\r\n    let r = <Result pattern = {this.state.pattern} />;\r\n    if(this.state.winner){ disp = <Element.WinnerBox />;\r\n    } else if (this.state.giveUp) {\r\n        disp = r;\r\n  } else {\r\n    disp = <React.Fragment>\r\n    <Selector select = {this.selectorHandle} />\r\n    <div className=\"button_container\">\r\n    <button className = \"button button_sep\" onClick = {this.submitHandler} >submit</button>\r\n    <button className = \"button button_sep\" onClick = {this.getResultHandler} >i give up</button>\r\n    <button className = \"button button_sep\" onClick = {this.clearHandler} >clear</button>\r\n    </div>\r\n    </React.Fragment>\r\n  }\r\n    return (\r\n<div className=\"App\" >\r\n\r\n<ListSelected round = {this.state.round} selectedColor = {this.state.selectedColor} markerColor = {this.state.markerColor}  />\r\n{disp}\r\n<Element.ResetButton resetHandler = {this.resetHandler} />\r\n</div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App/>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}